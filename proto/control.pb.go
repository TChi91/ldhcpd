// Code generated by protoc-gen-go. DO NOT EDIT.
// source: control.proto

package proto

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type MACAddress struct {
	Address              string   `protobuf:"bytes,1,opt,name=Address,proto3" json:"Address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MACAddress) Reset()         { *m = MACAddress{} }
func (m *MACAddress) String() string { return proto.CompactTextString(m) }
func (*MACAddress) ProtoMessage()    {}
func (*MACAddress) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c5120591600887d, []int{0}
}

func (m *MACAddress) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MACAddress.Unmarshal(m, b)
}
func (m *MACAddress) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MACAddress.Marshal(b, m, deterministic)
}
func (m *MACAddress) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MACAddress.Merge(m, src)
}
func (m *MACAddress) XXX_Size() int {
	return xxx_messageInfo_MACAddress.Size(m)
}
func (m *MACAddress) XXX_DiscardUnknown() {
	xxx_messageInfo_MACAddress.DiscardUnknown(m)
}

var xxx_messageInfo_MACAddress proto.InternalMessageInfo

func (m *MACAddress) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type Lease struct {
	MACAddress           string               `protobuf:"bytes,1,opt,name=MACAddress,proto3" json:"MACAddress,omitempty"`
	IPAddress            string               `protobuf:"bytes,2,opt,name=IPAddress,proto3" json:"IPAddress,omitempty"`
	LeaseEnd             *timestamp.Timestamp `protobuf:"bytes,3,opt,name=LeaseEnd,proto3" json:"LeaseEnd,omitempty"`
	Dynamic              bool                 `protobuf:"varint,4,opt,name=Dynamic,proto3" json:"Dynamic,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *Lease) Reset()         { *m = Lease{} }
func (m *Lease) String() string { return proto.CompactTextString(m) }
func (*Lease) ProtoMessage()    {}
func (*Lease) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c5120591600887d, []int{1}
}

func (m *Lease) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Lease.Unmarshal(m, b)
}
func (m *Lease) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Lease.Marshal(b, m, deterministic)
}
func (m *Lease) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Lease.Merge(m, src)
}
func (m *Lease) XXX_Size() int {
	return xxx_messageInfo_Lease.Size(m)
}
func (m *Lease) XXX_DiscardUnknown() {
	xxx_messageInfo_Lease.DiscardUnknown(m)
}

var xxx_messageInfo_Lease proto.InternalMessageInfo

func (m *Lease) GetMACAddress() string {
	if m != nil {
		return m.MACAddress
	}
	return ""
}

func (m *Lease) GetIPAddress() string {
	if m != nil {
		return m.IPAddress
	}
	return ""
}

func (m *Lease) GetLeaseEnd() *timestamp.Timestamp {
	if m != nil {
		return m.LeaseEnd
	}
	return nil
}

func (m *Lease) GetDynamic() bool {
	if m != nil {
		return m.Dynamic
	}
	return false
}

type Leases struct {
	List                 []*Lease `protobuf:"bytes,1,rep,name=List,proto3" json:"List,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Leases) Reset()         { *m = Leases{} }
func (m *Leases) String() string { return proto.CompactTextString(m) }
func (*Leases) ProtoMessage()    {}
func (*Leases) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c5120591600887d, []int{2}
}

func (m *Leases) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Leases.Unmarshal(m, b)
}
func (m *Leases) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Leases.Marshal(b, m, deterministic)
}
func (m *Leases) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Leases.Merge(m, src)
}
func (m *Leases) XXX_Size() int {
	return xxx_messageInfo_Leases.Size(m)
}
func (m *Leases) XXX_DiscardUnknown() {
	xxx_messageInfo_Leases.DiscardUnknown(m)
}

var xxx_messageInfo_Leases proto.InternalMessageInfo

func (m *Leases) GetList() []*Lease {
	if m != nil {
		return m.List
	}
	return nil
}

func init() {
	proto.RegisterType((*MACAddress)(nil), "proto.MACAddress")
	proto.RegisterType((*Lease)(nil), "proto.Lease")
	proto.RegisterType((*Leases)(nil), "proto.Leases")
}

func init() {
	proto.RegisterFile("control.proto", fileDescriptor_0c5120591600887d)
}

var fileDescriptor_0c5120591600887d = []byte{
	// 301 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x50, 0xdf, 0x4a, 0xfb, 0x30,
	0x14, 0x6e, 0x7e, 0xfb, 0xf3, 0xeb, 0x4e, 0xb7, 0x0b, 0x73, 0x21, 0x25, 0x8a, 0x96, 0x5c, 0x48,
	0x11, 0xec, 0xa0, 0xa2, 0x17, 0xde, 0x8d, 0x39, 0x44, 0x98, 0x20, 0xd5, 0x17, 0xe8, 0xd6, 0x38,
	0x0a, 0x4b, 0x53, 0x9a, 0x28, 0xec, 0x49, 0x7c, 0x41, 0x1f, 0x44, 0x9a, 0x34, 0xae, 0x53, 0x7a,
	0xd5, 0x7e, 0xf9, 0xfe, 0x9c, 0xef, 0x1c, 0x98, 0xac, 0x45, 0xa1, 0x2a, 0xb1, 0x8d, 0xca, 0x4a,
	0x28, 0x81, 0x07, 0xfa, 0x43, 0xce, 0x37, 0x42, 0x6c, 0xb6, 0x6c, 0xaa, 0xd1, 0xea, 0xfd, 0x6d,
	0xaa, 0x72, 0xce, 0xa4, 0x4a, 0x79, 0x69, 0x74, 0xe4, 0xe4, 0xb7, 0x80, 0xf1, 0x52, 0xed, 0x0c,
	0x49, 0x2f, 0x00, 0x9e, 0x66, 0xf3, 0x59, 0x96, 0x55, 0x4c, 0x4a, 0xec, 0xc3, 0xff, 0xe6, 0xd7,
	0x47, 0x01, 0x0a, 0x47, 0x89, 0x85, 0xf4, 0x13, 0xc1, 0x60, 0xc9, 0x52, 0xc9, 0xf0, 0x59, 0xdb,
	0xd1, 0xc8, 0xda, 0x19, 0xa7, 0x30, 0x7a, 0x7c, 0xb6, 0xf4, 0x3f, 0x4d, 0xef, 0x1f, 0xf0, 0x2d,
	0xb8, 0x3a, 0x66, 0x51, 0x64, 0x7e, 0x2f, 0x40, 0xa1, 0x17, 0x93, 0xc8, 0xf4, 0x8b, 0x6c, 0xbf,
	0xe8, 0xd5, 0x2e, 0x90, 0xfc, 0x68, 0xeb, 0x66, 0xf7, 0xbb, 0x22, 0xe5, 0xf9, 0xda, 0xef, 0x07,
	0x28, 0x74, 0x13, 0x0b, 0xe9, 0x25, 0x0c, 0xb5, 0x4a, 0xe2, 0x00, 0xfa, 0xcb, 0x5c, 0x2a, 0x1f,
	0x05, 0xbd, 0xd0, 0x8b, 0xc7, 0x26, 0x30, 0xd2, 0x64, 0xa2, 0x99, 0xf8, 0x0b, 0xc1, 0x58, 0xe3,
	0xb9, 0xb9, 0x24, 0x8e, 0xc1, 0x7d, 0x61, 0xca, 0x2c, 0x76, 0x60, 0x20, 0xc7, 0x7f, 0x6a, 0x2d,
	0xea, 0xb3, 0x51, 0x07, 0x5f, 0x81, 0xfb, 0x60, 0x3d, 0x47, 0x8d, 0x67, 0xbf, 0x3f, 0x39, 0x88,
	0xa1, 0x0e, 0xbe, 0x01, 0xa8, 0x67, 0x37, 0x1d, 0x3b, 0x62, 0xc9, 0xa4, 0xed, 0x92, 0xd4, 0xc1,
	0x77, 0xe0, 0x25, 0x8c, 0x8b, 0x0f, 0xd6, 0x39, 0xa8, 0xb3, 0xe1, 0x6a, 0xa8, 0x5f, 0xae, 0xbf,
	0x03, 0x00, 0x00, 0xff, 0xff, 0x11, 0xb4, 0x17, 0xde, 0x31, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// LeaseControlClient is the client API for LeaseControl service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LeaseControlClient interface {
	SetLease(ctx context.Context, in *Lease, opts ...grpc.CallOption) (*empty.Empty, error)
	GetLease(ctx context.Context, in *MACAddress, opts ...grpc.CallOption) (*Lease, error)
	ListLeases(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Leases, error)
	RemoveLease(ctx context.Context, in *MACAddress, opts ...grpc.CallOption) (*empty.Empty, error)
}

type leaseControlClient struct {
	cc grpc.ClientConnInterface
}

func NewLeaseControlClient(cc grpc.ClientConnInterface) LeaseControlClient {
	return &leaseControlClient{cc}
}

func (c *leaseControlClient) SetLease(ctx context.Context, in *Lease, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/proto.LeaseControl/SetLease", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leaseControlClient) GetLease(ctx context.Context, in *MACAddress, opts ...grpc.CallOption) (*Lease, error) {
	out := new(Lease)
	err := c.cc.Invoke(ctx, "/proto.LeaseControl/GetLease", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leaseControlClient) ListLeases(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Leases, error) {
	out := new(Leases)
	err := c.cc.Invoke(ctx, "/proto.LeaseControl/ListLeases", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leaseControlClient) RemoveLease(ctx context.Context, in *MACAddress, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/proto.LeaseControl/RemoveLease", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LeaseControlServer is the server API for LeaseControl service.
type LeaseControlServer interface {
	SetLease(context.Context, *Lease) (*empty.Empty, error)
	GetLease(context.Context, *MACAddress) (*Lease, error)
	ListLeases(context.Context, *empty.Empty) (*Leases, error)
	RemoveLease(context.Context, *MACAddress) (*empty.Empty, error)
}

// UnimplementedLeaseControlServer can be embedded to have forward compatible implementations.
type UnimplementedLeaseControlServer struct {
}

func (*UnimplementedLeaseControlServer) SetLease(ctx context.Context, req *Lease) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetLease not implemented")
}
func (*UnimplementedLeaseControlServer) GetLease(ctx context.Context, req *MACAddress) (*Lease, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLease not implemented")
}
func (*UnimplementedLeaseControlServer) ListLeases(ctx context.Context, req *empty.Empty) (*Leases, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLeases not implemented")
}
func (*UnimplementedLeaseControlServer) RemoveLease(ctx context.Context, req *MACAddress) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveLease not implemented")
}

func RegisterLeaseControlServer(s *grpc.Server, srv LeaseControlServer) {
	s.RegisterService(&_LeaseControl_serviceDesc, srv)
}

func _LeaseControl_SetLease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Lease)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeaseControlServer).SetLease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.LeaseControl/SetLease",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeaseControlServer).SetLease(ctx, req.(*Lease))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeaseControl_GetLease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MACAddress)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeaseControlServer).GetLease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.LeaseControl/GetLease",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeaseControlServer).GetLease(ctx, req.(*MACAddress))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeaseControl_ListLeases_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeaseControlServer).ListLeases(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.LeaseControl/ListLeases",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeaseControlServer).ListLeases(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeaseControl_RemoveLease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MACAddress)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeaseControlServer).RemoveLease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.LeaseControl/RemoveLease",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeaseControlServer).RemoveLease(ctx, req.(*MACAddress))
	}
	return interceptor(ctx, in, info, handler)
}

var _LeaseControl_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.LeaseControl",
	HandlerType: (*LeaseControlServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetLease",
			Handler:    _LeaseControl_SetLease_Handler,
		},
		{
			MethodName: "GetLease",
			Handler:    _LeaseControl_GetLease_Handler,
		},
		{
			MethodName: "ListLeases",
			Handler:    _LeaseControl_ListLeases_Handler,
		},
		{
			MethodName: "RemoveLease",
			Handler:    _LeaseControl_RemoveLease_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "control.proto",
}
